name: Frontend Deployment

on:
  push:
    branches:
      - competition

    # backend 폴더에 수정이 있을시만 배포
    paths:
      - "frontend/**"
      - ".github/workflows/deploy_frontend**"

env:
  SERVER_NAME: frontend
  SERVER_DIR: frontend
  RELEASE_VERSION: frontend-v${{github.run_number}}
  BRANCH_NAME: ${{github.head_ref || github.ref_name}}  
  DOCKER_REPO: ghcr.io/strokeplay-development/

jobs:
  build:
    name: Build and deploy
    runs-on: ubuntu-latest

    steps:

      - name: Target Branch name
        run: echo ${{env.BRANCH_NAME}}      
      
      - name: Release Version
        run: echo ${{github.run_number}}

      # checkout source
      - name: Checkout source from ${{ env.BRANCH_NAME }}
        uses: actions/checkout@v3

      # builder for backend
      - uses: docker/setup-buildx-action@v2
        id: src_builder

      - name: Prepare Builder
        run: echo ${{ steps.src_builder.outputs.name }}

      # login to ghcr
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      # create dockerfile
      - name: Create Dockerfile
        run: |
          echo 'FROM node:14-alpine as builder' >> Dockerfile
          echo 'RUN apk update' >> Dockerfile
          echo 'RUN apk add --no-cache tzdata' >> Dockerfile
          echo 'RUN apk add g++ make python3' >> Dockerfile          
          echo 'WORKDIR /app' >> Dockerfile
          echo 'COPY ./frontend/package.json ./' >> Dockerfile          
          echo 'RUN npm install' >> Dockerfile
          echo 'COPY ./frontend ./' >> Dockerfile
          echo 'RUN npm run build:${{env.BRANCH_NAME}}' >> Dockerfile
          echo 'FROM nginx' >> Dockerfile
          echo 'EXPOSE 3000' >> Dockerfile
          echo 'COPY ./frontend/nginx/default.conf /etc/nginx/conf.d/default.conf' >> Dockerfile
          echo 'COPY --from=builder /app/dist /usr/share/nginx/html' >> Dockerfile

      - name: Build Against ${{ env.BRANCH_NAME }}
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.src_builder.outputs.name }}
          context: ./
          file: ./Dockerfile
          push: true          
          tags: |
            ghcr.io/strokeplay-development/${{env.BRANCH_NAME}}-${{env.SERVER_NAME}}:latest
            ghcr.io/strokeplay-development/${{env.BRANCH_NAME}}-${{env.SERVER_NAME}}:${{ env.RELEASE_VERSION }}

      - name: Create Dockerrun.aws.json file
        run: |
          echo '{' > Dockerrun.aws.json      
          echo '"AWSEBDockerrunVersion": "1",' >> Dockerrun.aws.json      
          echo '"Authentication": {' >> Dockerrun.aws.json      
          echo '"Bucket": "elasticbeanstalk-ap-northeast-2-775934587721",' >> Dockerrun.aws.json      
          echo '"Key": "ghcr_dockercfg2"' >> Dockerrun.aws.json      
          echo '},' >> Dockerrun.aws.json      
          echo '"Image": {' >> Dockerrun.aws.json      
          echo '"Name": "ghcr.io/strokeplay-development/${{env.BRANCH_NAME}}-${{env.SERVER_NAME}}:${{ env.RELEASE_VERSION }}",' >> Dockerrun.aws.json      
          echo '"Update": "true"' >> Dockerrun.aws.json      
          echo '},' >> Dockerrun.aws.json      
          echo '"Ports": [ {' >> Dockerrun.aws.json      
          echo '"hostPort": 80,' >> Dockerrun.aws.json      
          echo '"containerPort": 3000' >> Dockerrun.aws.json      
          echo '}],' >> Dockerrun.aws.json      
          echo '"Logging": "/var/log/nginx"' >> Dockerrun.aws.json      
          echo '}' >> Dockerrun.aws.json

      # 압축 파일 생성
      - 
        name: Generate deployment package
        run: |
          pwd
          ls -la
          zip -r deploy.zip Dockerrun.aws.json

      # s3 에 배포
      - name: Upload deploy.zip to s3 for ${{ github.github_event_name }}
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws_secret_key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          application_name: ${{env.BRANCH_NAME}}          
          version_label: ${{env.RELEASE_VERSION}}
          environment_name: ${{env.SERVER_NAME}}
          region: ap-northeast-2
          deployment_package: deploy.zip
          use_existing_version_if_available: true

      # 배포 시작을 알린다.
      - name: action-slack
        uses: 8398a7/action-slack@v3
        with:
          job_name: "${{ env.BRANCH_NAME }} 배포"
          channel: "backend-deployment"
          status: ${{ job.status }}
          author_name: ${{ github.actor }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        if: always() # Pick up events even if the job fails or is canceled.
